// This file is autogenerated for directory: ecc384_sign
package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

// ECC256Request represents the input message
type ECC256Request struct {
	Message string `json:"message"`
}

// ECC256Response represents the signed response
type ECC256Response struct {
	Signature string `json:"signature"`
}

// Handler function processes incoming requests
func functionHandler(ctx context.Context, event events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Get the KMS key ARN from environment variables
	eccKmsKeyID := os.Getenv("ECC384_KMS_KEY_ARN")
	if eccKmsKeyID == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "ECC 256 KMS key ARN not set"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Parse the incoming request body
	var messageStruct ECC256Request
	err := json.Unmarshal([]byte(event.Body), &messageStruct)
	if err != nil || messageStruct.Message == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 400,
			Body:       `{"error": "Invalid request body, missing message"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "Failed to load AWS config"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Initialize KMS client
	kmsClient := kms.NewFromConfig(cfg)

	// Call the function to sign the message using KMS
	signatureResponse, err := kmsClientSignMessage(ctx, kmsClient, eccKmsKeyID, messageStruct.Message)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "Error signing message: %v"}`, err),
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Prepare the response body
	responseBody, _ := json.Marshal(signatureResponse)

	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Body:       string(responseBody),
		Headers: map[string]string{
			"Access-Control-Allow-Origin": "*",
			"Content-Type":                "application/json",
		},
	}, nil
}

// kmsClientSignMessage calls KMS to sign the message using ECC256
func kmsClientSignMessage(ctx context.Context, kmsClient *kms.Client, keyID string, message string) (*ECC256Response, error) {
	// Convert the message to a Blob
	messageBlob := []byte(message)

	// Call KMS to sign the message
	signOutput, err := kmsClient.Sign(ctx, &kms.SignInput{
		KeyId:            aws.String(keyID),
		Message:          messageBlob,
		MessageType:      types.MessageTypeRaw,
		SigningAlgorithm: types.SigningAlgorithmSpecEcdsaSha256,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to sign message: %w", err)
	}

	// Get the signature from the response
	if signOutput.Signature == nil {
		return nil, fmt.Errorf("no signature returned from KMS")
	}

	// Encode the signature in Base64
	signatureB64 := base64.StdEncoding.EncodeToString(signOutput.Signature)

	// Prepare the response
	return &ECC256Response{
		Signature: signatureB64,
	}, nil
}

func main() {
	// Start the Lambda function
	lambda.Start(functionHandler)
}
