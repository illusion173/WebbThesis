// This file is autogenerated for directory: aes256_encrypt

package main

import (
	"context"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

// Request structure to parse the incoming JSON body
type MessageStruct struct {
	Message string `json:"message"`
}

// Response structure for returning encrypted content
type EncryptedResponse struct {
	Ciphertext   string `json:"ciphertext"`
	EncryptedKey string `json:"encrypted_key"`
	IV           string `json:"iv"`
	Tag          string `json:"tag"`
	Error        string `json:"error,omitempty"`
}

// Lambda function handler
func functionHandler(ctx context.Context, event events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Get the KMS key ARN from environment variables
	kmsKeyID := os.Getenv("AES_KMS_KEY_ARN")
	if kmsKeyID == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "KMS key ARN not set"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Parse the incoming request body
	var messageStruct MessageStruct
	err := json.Unmarshal([]byte(event.Body), &messageStruct)
	if err != nil || messageStruct.Message == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 400,
			Body:       `{"error": "Invalid request body, missing message"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "Failed to load AWS config"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Initialize the KMS client
	kmsClient := kms.NewFromConfig(cfg)

	// Generate a data key using KMS
	dataKeyOutput, err := kmsClient.GenerateDataKey(ctx, &kms.GenerateDataKeyInput{
		KeyId:   aws.String(kmsKeyID),
		KeySpec: types.DataKeySpecAes256,
	})
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "Failed to generate data key: %v"}`, err),
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Extract plaintext and encrypted data key
	plaintextDataKey := dataKeyOutput.Plaintext
	encryptedDataKey := dataKeyOutput.CiphertextBlob

	// Encrypt the message using AES-GCM
	ciphertext, iv, tag, err := encryptMessageWithAESGCM(plaintextDataKey, []byte(messageStruct.Message))
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "Failed to encrypt message: %v"}`, err),
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Prepare the response with ciphertext and encrypted key
	response := EncryptedResponse{
		Ciphertext:   base64.StdEncoding.EncodeToString(ciphertext),
		EncryptedKey: base64.StdEncoding.EncodeToString(encryptedDataKey),
		IV:           base64.StdEncoding.EncodeToString(iv),
		Tag:          base64.StdEncoding.EncodeToString(tag),
	}
	responseBody, _ := json.Marshal(response)

	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Body:       string(responseBody),
		Headers: map[string]string{
			"Access-Control-Allow-Origin": "*",
			"Content-Type":                "application/json",
		},
	}, nil
}

// AES-GCM encryption
func encryptMessageWithAESGCM(key []byte, message []byte) ([]byte, []byte, []byte, error) {
	iv_size_int := 12
	// Create a new AES cipher block
	block, err := aes.NewCipher(key)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to create AES cipher: %w", err)
	}

	// Use GCM mode for encryption
	gcm, err := cipher.NewGCMWithNonceSize(block, iv_size_int)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to create GCM cipher: %w", err)
	}

	// Generate a random IV (nonce)
	iv := make([]byte, gcm.NonceSize())
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		return nil, nil, nil, fmt.Errorf("failed to generate IV: %w", err)
	}

	// Encrypt the message using AES-GCM
	ciphertext := gcm.Seal(nil, iv, message, nil)
	tag := ciphertext[len(ciphertext)-gcm.Overhead():]
	ciphertext = ciphertext[:len(ciphertext)-gcm.Overhead()]

	return ciphertext, iv, tag, nil
}

func main() {
	// Start the Lambda function
	lambda.Start(functionHandler)
}
