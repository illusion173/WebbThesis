// This file is autogenerated for directory: ecc384_verify
package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

// ECC384Request represents the input message and signature
type ECC384Request struct {
	Message   string `json:"message"`
	Signature string `json:"signature"`
}

// ECC384Response represents the validation response
type ECC384Response struct {
	Valid bool `json:"valid"`
}

// Handler function processes incoming requests
func functionHandler(ctx context.Context, event events.LambdaFunctionURLRequest) (events.LambdaFunctionURLResponse, error) {
	// Get the KMS key ARN from environment variables
	eccKmsKeyID := os.Getenv("ECC384_KMS_KEY_ARN")
	if eccKmsKeyID == "" {
		return events.LambdaFunctionURLResponse{
			StatusCode: 500,
			Body:       `{"error": "ECC 384 KMS key ARN not set"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Parse the incoming request body
	var messageStruct ECC384Request
	err := json.Unmarshal([]byte(event.Body), &messageStruct)
	if err != nil || messageStruct.Message == "" || messageStruct.Signature == "" {
		return events.LambdaFunctionURLResponse{
			StatusCode: 400,
			Body:       `{"error": "Invalid request body, missing message or signature"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return events.LambdaFunctionURLResponse{
			StatusCode: 500,
			Body:       `{"error": "Failed to load AWS config"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Initialize KMS client
	kmsClient := kms.NewFromConfig(cfg)

	// Call the function to verify the signature using KMS
	verificationResponse, err := kmsClientVerifyMessage(ctx, kmsClient, eccKmsKeyID, messageStruct.Message, messageStruct.Signature)
	if err != nil {
		return events.LambdaFunctionURLResponse{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "Error verifying message: %v"}`, err),
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Prepare the response body
	responseBody, _ := json.Marshal(verificationResponse)

	return events.LambdaFunctionURLResponse{
		StatusCode: 200,
		Body:       string(responseBody),
		Headers: map[string]string{
			"Access-Control-Allow-Origin": "*",
			"Content-Type":                "application/json",
		},
	}, nil
}

// kmsClientVerifyMessage verifies the message signature using ECC384 and AWS KMS
func kmsClientVerifyMessage(ctx context.Context, kmsClient *kms.Client, keyID string, message string, signatureB64 string) (*ECC384Response, error) {
	// Decode the base64-encoded signature
	signature, err := base64.StdEncoding.DecodeString(signatureB64)
	if err != nil {
		return nil, fmt.Errorf("failed to decode signature: %w", err)
	}

	// Perform the verification with KMS
	verifyOutput, err := kmsClient.Verify(ctx, &kms.VerifyInput{
		KeyId:            aws.String(keyID),
		Message:          []byte(message),
		MessageType:      types.MessageTypeRaw,
		Signature:        signature,
		SigningAlgorithm: types.SigningAlgorithmSpecEcdsaSha384,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to verify message: %w", err)
	}

	// Prepare the response
	return &ECC384Response{
		Valid: verifyOutput.SignatureValid,
	}, nil
}

func main() {
	// Start the Lambda function
	lambda.Start(functionHandler)
}
