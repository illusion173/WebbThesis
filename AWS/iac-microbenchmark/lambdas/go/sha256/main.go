// This file is autogenerated for directory: sha256
package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
)

// Request structure to parse the incoming JSON body
type MessageStruct struct {
	Message string `json:"message"`
}

// Response structure for returning JSON response
type ResponseStruct struct {
	Signature string `json:"signature,omitempty"`
	Error     string `json:"error,omitempty"`
}

// Lambda function handler
func functionHandler(ctx context.Context, event events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Get the KMS key ARN from environment variables
	shaKmsKeyID := os.Getenv("SHA256_KMS_KEY_ARN")
	if shaKmsKeyID == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "KMS key ARN not set"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Parse the incoming request body to extract the message
	var messageStruct MessageStruct
	err := json.Unmarshal([]byte(event.Body), &messageStruct)
	if err != nil || messageStruct.Message == "" {
		return events.APIGatewayProxyResponse{
			StatusCode: 400,
			Body:       `{"error": "Invalid request body, missing message"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Convert the message to bytes (Blob equivalent)
	messageBytes := []byte(messageStruct.Message)

	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       `{"error": "Failed to load AWS config"}`,
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Initialize the KMS client
	kmsClient := kms.NewFromConfig(cfg)

	// Call the function to sign the message using KMS
	signature, err := kmsSignMessage(ctx, kmsClient, shaKmsKeyID, messageBytes)
	if err != nil {
		return events.APIGatewayProxyResponse{
			StatusCode: 500,
			Body:       fmt.Sprintf(`{"error": "Error signing message: %v"}`, err),
			Headers: map[string]string{
				"Access-Control-Allow-Origin": "*",
				"Content-Type":                "application/json",
			},
		}, nil
	}

	// Return the response with the generated signature
	response := ResponseStruct{Signature: signature}
	responseBody, _ := json.Marshal(response)

	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Body:       string(responseBody),
		Headers: map[string]string{
			"Access-Control-Allow-Origin": "*",
			"Content-Type":                "application/json",
		},
	}, nil
}

// Function to sign a message using AWS KMS
func kmsSignMessage(ctx context.Context, kmsClient *kms.Client, keyID string, message []byte) (string, error) {
	// Call KMS to generate MAC (HMAC) signature
	macOutput, err := kmsClient.GenerateMac(ctx, &kms.GenerateMacInput{
		KeyId:        aws.String(keyID),
		Message:      message,
		MacAlgorithm: types.MacAlgorithmSpecHmacSha256,
	})
	if err != nil {
		return "", fmt.Errorf("failed to generate MAC: %w", err)
	}

	// Base64 encode the generated MAC
	if macOutput.Mac == nil {
		return "", fmt.Errorf("no MAC hash returned")
	}
	return base64.StdEncoding.EncodeToString(macOutput.Mac), nil
}

func main() {
	// Start the Lambda function
	lambda.Start(functionHandler)
}
